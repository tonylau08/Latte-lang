package lt::dsl::sql::test

import lt::dsl::sql::_
import java::sql::_

data class User
    id=Column(this, "id")
    name=Column(this, "name")

data class Tbl
    name=Column(this, "name")

class TestSQL
    static
        def testSelectString()
            user = User()

            return (SQL("`") select [user.id,user.name] from user where user.id > 7 orderBy user.id.desc limit 1,7) buildSQL

        def testSelectAlias()
            user = User()

            return (SQL("`") select [
                    user.id `as` "theId"
                    user.name `as` "theName"
                ] from user) buildSQL

        def testSelectWithSubQuery()
            SQL = SQL("`")
            user = User()

            return (SQL select [user.id, user.name] from user where user.id <= (SQL select user.id from user limit 1) orderBy user.id.desc) buildSQL

        def testInsertString()
            user = User()

            return (SQL("`") insert_into user _ [user.id, user.name] values [1, 'cass']) buildSQL

        def testUpdateString()
            user = User()

            return (SQL("`") update user set user.id:=1 where user.name=:='cass') buildSQL

        def testDeleteString()
            user = User()

            return (SQL("`") delete_from user where user.id=:=1) buildSQL

        def testAndOr()
            user = User()

            return (SQL() select user.name from user where user.id > 10 & user.name!:='abc' | user.id < 5) buildSQL

        def testAllQueries()
            user = User()
            tbl = Tbl()
            s1 = SQL()
            s2 = SQL()
            s3 = SQL()
            s4 = SQL()
            s5 = SQL()
            s6 = SQL()

            return [
                ; select_distinct
                (s1 select_distinct user.name from user) buildSQL
                ; count
                (s2 select s2.count(user.name) from user) buildSQL
                ; mid
                (s3 select s3.mid(user.name, 1) from user) buildSQL
                ; as
                (s4 select (s4 mid user.name, 1 `as` "a") from user) buildSQL
                ; union
                (s5 select user.name from user) union (s5 select user.name from user) union (s5 select user.name from user) buildSQL
                ; select into
                (s6 select user.id into tbl from user where user.name =:= 'a') buildSQL
            ]
