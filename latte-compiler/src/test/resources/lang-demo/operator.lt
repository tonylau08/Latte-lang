; Latte supports operator binding
; e.g. + is bond to add(?)
; a + b can be considered as a.add(b)

; here's all operators supported in Latte
class Num(public i)
    equals(o):bool             ; bind ==
        if o is null
            return false
        elseif o is type Num
            return this.i==o.i
        else
            return false

    add(o)=Num(i+o)            ; bind +
    subtract(o)=Num(i-o)       ; bind -
    multiply(o)=Num(i*o)       ; bind *
    divide(o)=Num(i/o)         ; bind /
    remainder(o)=Num(i%o)      ; bind %
    shiftLeft(o)=Num(i<<o)     ; bind <<
    shiftRight(o)=Num(i>>o)    ; bind >>
    unsignedShiftRight(o)=Num(i>>>o); bind >>>
    equal(o)=i==o              ; bind =:=
    notEqual(o)=i!=o           ; bind !:=
    def contains(o)            ; bind (this in o)
        throw UnsupportedOperationException('contains')
    gt(o)=i>o                  ; bind >
    ge(o)=i>=o                 ; bind >=
    lt(o)=i<o                  ; bind <
    le(o)=i<=o                 ; bind <=
    `and`(o)=Num(i&o)          ; bind &
    xor(o)=Num(i^o)            ; bind ^
    `or`(o)=Num(i|o)           ; bind |
    def logicNot()             ; bind unary !
        throw UnsupportedOperationException('logicNot')
    `not`()=Num(~i)            ; bind ~
    negate()=Num(-i)           ; bind -
    def concat(o)                  ; bind :::
        throw UnsupportedOperationException('concat')

    toString():String="Num("+i+")"

class TestNum
    static
        testAdd()=Num(1)+1           ; should be Num(2)
        testSubtract()=Num(1)-2      ; should be Num(-1)
        testMultiply()=Num(3)*4      ; should be Num(12)
        testDivide()=Num(10)/2       ; should be Num(5)
        testRemainder()=Num(12)%5    ; should be Num(2)
        testShiftLeft()=Num(1)<<2    ; should be Num(4)
        testShiftRight()=Num(4)>>2   ; should be Num(1)
        testUnsignedShiftRight()=Num(8)>>>2 ; should be Num(2)
        testEqual()=Num(1)=:=1       ; should be true
        testNotEqual()=Num(1)!:=2    ; should be true
        testEquals()=Num(1)==Num(1)  ; should be true
        testContains()=1 in Num(1)   ; should throw exception
        testGt()=Num(1)>0            ; should be true
        testGe()=Num(1)>=1           ; should be true
        testLt()=Num(1)<2            ; should be true
        testLe()=Num(1)<=1           ; should be true
        testAnd()=Num(1) & 2         ; should be Num(0)  (01 & 10)
        testXor()=Num(1) ^ 2         ; should be Num(3)  (01 ^ 10)
        testOr()=Num(1) | 2          ; should be Num(3)  (01 | 10)
        testLogicNot()=!Num(1)       ; should throw exception
        testNot()=~Num(1)            ; should be Num(-2)
        testNegate()=-Num(1)         ; should be Num(-1)
        testConcat()=Num(1):::Num(2) ; should throw exception
