/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2016 KuiGang Wang
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/*
This is a package used to generate HTML text.
e.g.

    html + [
        head
        body + [
            form + [
                input(typ='text', value='hello world')
                Input(typ='submit', value='ok')
            ]
        ]
    ]

invoke toString() method, the result would be

    <html><head></head><body><form><input type="text" value="hello world"><input type="submit" value="ok"></form></body></html>

invoke pretty() method, the result would be

    <html>
      <head>
      </head>
      <body>
        <form>
          <input type="text" value="hello world">
          <input type="submit" value="ok">
        </form>
      </body>
    </html>

you can also write css:

    css('body') + {
      'background-color' : 'grey'
    }

*/
package lt::dsl::html

import lt::util::_

private class StringUtils
    static
        val htmlEscapeMap = {
            '<' : "&lt;"
            '>' : "&gt;"
            '&' : "&amp;"
            '"' : "&quot;"
            ' ' : "&nbsp;"
        }.immutable
        val attrEscapeMap = {
            '"' : "&quot;"
        }.immutable
        escapeHtml(source):String
            source = source.toString
            sb = StringBuilder()
            arr:[]char = source.toCharArray()
            for i in 0.:arr.length
                c:char = arr[i]
                res = htmlEscapeMap[c]
                if res
                    sb append res
                else
                    sb append c
            return sb.toString()
        escapeAttr(attr):String
            attr = attr.toString
            sb = StringBuilder()
            arr:[]char = attr.toCharArray()
            for i in 0.:arr.length
                c:char = arr[i]
                res = attrEscapeMap[c]
                if res
                    sb append res
                else
                    sb append c
            return sb.toString()
        buildSpaces(i:int):String
            sb = StringBuilder
            for x in 0.:i
                sb append " "
            return sb toString

/*
Write css with Latte-lang dsl
e.g.

    css('body') + {
      'background-color' : 'grey'
    }

*/
class css(selector)
    attrs:Map
    add(attrs:Map):css
        this.attrs=attrs
        return this
    toString():String
        sb = StringBuilder
        sb append selector append "{"
        for entry in attrs
            sb append entry.key append ":" append entry.value append ";"
        sb append "}"
        return sb toString
    pretty(indentation=0):String
        sb = StringBuilder
        sb append StringUtils.buildSpaces(indentation) append selector append " {\n"
        for entry in attrs
            sb append StringUtils.buildSpaces(indentation+2) append entry.key append " : " append entry.value append ";\n"
        sb append StringUtils.buildSpaces(indentation) append "}"
        return sb toString

/*
The base of all HTMLElement. the DOM provides 4 attributes : id, name, class, and style.
The toString({}) method returns <simple-name-lower-case attr='value'>.
It doesn't contain the closing tag
Use class HTMLElementWithClosing if the closing tag is required
*/
abstract data class HTMLElement(cls)
    attrMap={}
    set(attrName:String, o):HTMLElement
        str = (
            if o==null || o==undefined
                return ""
            else
                return o
        )
        attrMap[attrName.replace("_", "-")] = str
        return this
    attr(attrName:String, o):HTMLElement
        attrMap[attrName] = (
            if o==null || o==undefined
                return ""
            else
                return o
        )
        return this
    /*
    add class to the element. the input '_' would be replaced with '-'.
    */
    get(className:String):HTMLElement
        className = className.replace("_", "-")
        if attrMap["class"]
            attrMap['class'] = attrMap['class'].toString()+" "+className
        else
            attrMap['class'] = className
        return this

    toString(attrs):String
        sb = StringBuilder()
        sb append "<" append this.getClass.getSimpleName

        for entry in attrMap
            sb append " " append entry.key append "=\"" append StringUtils.escapeAttr(entry.value) append "\""
        if cls
            sb append " class=\"" append StringUtils.escapeAttr(cls) append "\""

        for entry in attrs
            if entry.value
                sb append " " append entry.key append "=\"" append StringUtils.escapeAttr(entry.value) append "\""

        sb append ">"

        return sb toString

    pretty(attrs, indentation:int=0):String
        sb = StringBuilder
        sb append StringUtils.buildSpaces(indentation) append toString(attrs)
        return sb toString

    abstract pretty(indentation:int):String=...

/*
The base of all DOM that should have a closing tag
*/
abstract data class HTMLElementWithClosing : HTMLElement
    children : List

    def add(children:List)
        this.children=children
        return this

    toString(attrs):String
        sb=StringBuilder()
        sb append HTMLElement.this.toString(attrs)

        if children
            for i in children
                if i is type String
                    sb append StringUtils.escapeHtml(i)
                else
                    sb append i

        sb append "</" append this.getClass.getSimpleName.toLowerCase append ">"
        return sb toString

    pretty(attrs, indentation:int=0):String
        val inc = 2
        sb = StringBuilder
        sb append StringUtils.buildSpaces(indentation) append HTMLElement.this.toString(attrs) append "\n"

        if children
            for i in children
                if i is type String
                    sb append StringUtils.buildSpaces(indentation+inc) append StringUtils.escapeHtml(i)
                else
                    if i is type HTMLElement or i is type css
                        sb append i.pretty(indentation+inc as int)
                    else
                        sb append StringUtils.buildSpaces(indentation+inc) append i
                sb append "\n"
        sb append StringUtils.buildSpaces(indentation) append "</" append this.getClass.getSimpleName.toLowerCase append ">"
        return sb toString

/*
simply use the string as HTML without escaping.
*/
data class Plain(text:String) : HTMLElement
    toString():String=text
    pretty(indentation:int=0):String=StringUtils.buildSpaces(indentation)+text

; <html>...</html>
data class html : HTMLElementWithClosing
    toString():String = toString({})
    pretty(indentation:int=0):String = pretty({}, indentation)

; <head>...</head>
data class head : HTMLElementWithClosing
    toString():String = toString({})
    pretty(indentation:int=0):String = pretty({}, indentation)

; <meta http-equiv='' scheme=''>
data class meta : HTMLElement
    toString():String = toString({})
    pretty(indentation:int=0):String = pretty({}, indentation)

; <script src='' type=''>...</script>
data class script(typ) : HTMLElementWithClosing
    toString():String = toString({'type':typ})
    pretty(indentation:int=0):String = pretty({'type':typ}, indentation)

; <link rel='' type='' href=''>
data class link(typ) : HTMLElement
    toString():String = toString({'type':typ})
    pretty(indentation:int=0):String = pretty({'type':typ}, indentation)

; <body>...</body>
data class body : HTMLElementWithClosing
    toString():String = toString({})
    pretty(indentation:int=0):String = pretty({}, indentation)

; <a href=''>...</a>
data class a : HTMLElementWithClosing
    toString():String = toString({})
    pretty(indentation:int=0):String = pretty({}, indentation)

; <br>
data class br : HTMLElement
    toString():String = toString({})
    pretty(indentation:int=0):String = pretty({}, indentation)

; <button type=''>...</button>
data class button(typ) : HTMLElementWithClosing
    toString():String = toString({'type':typ})
    pretty(indentation:int=0):String = pretty({'type':typ}, indentation)

; <code>...</code>
data class code : HTMLElementWithClosing
    toString():String = toString({})
    pretty(indentation:int=0):String = pretty({}, indentation)

; <div>...</div>
data class div : HTMLElementWithClosing
    toString():String = toString({})
    pretty(indentation:int=0):String = pretty({}, indentation)

; <h1>...</h1>
data class h1 : HTMLElementWithClosing
    toString():String = toString({})
    pretty(indentation:int=0):String = pretty({}, indentation)

; <h2>...</h2>
data class h2 : HTMLElementWithClosing
    toString():String = toString({})
    pretty(indentation:int=0):String = pretty({}, indentation)

; <h3>...</h3>
data class h3 : HTMLElementWithClosing
    toString():String = toString({})
    pretty(indentation:int=0):String = pretty({}, indentation)

; <h4>...</h4>
data class h4 : HTMLElementWithClosing
    toString():String = toString({})
    pretty(indentation:int=0):String = pretty({}, indentation)

; <h5>...</h5>
data class h5 : HTMLElementWithClosing
    toString():String = toString({})
    pretty(indentation:int=0):String = pretty({}, indentation)

; <h6>...</h6>
data class h6 : HTMLElementWithClosing
    toString():String = toString({})
    pretty(indentation:int=0):String = pretty({}, indentation)

; <hr>
data class hr : HTMLElementWithClosing
    toString():String = toString({})
    pretty(indentation:int=0):String = pretty({}, indentation)

; <iframe src=''>...</iframe>
data class iframe : HTMLElementWithClosing
    toString():String = toString({})
    pretty(indentation:int=0):String = pretty({}, indentation)

; <img src=''>...</img>
data class img : HTMLElementWithClosing
    toString():String = toString({})
    pretty(indentation:int=0):String = pretty({}, indentation)

; <label>...</label>
data class label : HTMLElementWithClosing
    toString():String = toString({})
    pretty(indentation:int=0):String = pretty({}, indentation)

; <form action='' method=''></form>
data class form : HTMLElementWithClosing
    toString():String = toString({})
    pretty(indentation:int=0):String = pretty({}, indentation)

data class i : HTMLElementWithClosing
    toString():String = toString({})
    pretty(indentation:int=0):String = pretty({}, indentation)

; <input type='' value=''>
data class input(typ) : HTMLElement
    toString():String = toString({"type" : typ})
    pretty(indentation:int=0):String = pretty({'type':typ}, indentation)

; <textarea>...</textarea>
data class textarea : HTMLElementWithClosing
    toString():String = toString({})
    pretty(indentation:int=0):String = pretty({}, indentation)

; <select>...</select>
data class select : HTMLElementWithClosing
    toString():String = toString({})
    pretty(indentation:int=0):String = pretty({}, indentation)

data class span : HTMLElementWithClosing
    toString():String = toString({})
    pretty(indentation:int=0):String = pretty({}, indentation)

; <option value=''>...</option>
data class option : HTMLElementWithClosing
    toString():String = toString({})
    pretty(indentation:int=0):String = pretty({}, indentation)

; <nav>...</nav>
data class nav : HTMLElementWithClosing
    toString():String = toString({})
    pretty(indentation:int=0):String = pretty({}, indentation)

; <ol>...</ol>
data class ol : HTMLElementWithClosing
    toString():String = toString({})
    pretty(indentation:int=0):String = pretty({}, indentation)

; <ul>...</ul>
data class ul : HTMLElementWithClosing
    toString():String = toString({})
    pretty(indentation:int=0):String = pretty({}, indentation)

; <li>...</li>
data class li : HTMLElementWithClosing
    toString():String = toString({})
    pretty(indentation:int=0):String = pretty({}, indentation)

; <p>...</p>
data class p : HTMLElementWithClosing
    toString():String = toString({})
    pretty(indentation:int=0):String = pretty({}, indentation)

; <pre>...</pre>
data class pre : HTMLElementWithClosing
    toString():String = toString({})
    pretty(indentation:int=0):String = pretty({}, indentation)

; <style>...</style>
data class style : HTMLElementWithClosing
    toString():String = toString({})
    pretty(indentation:int=0):String = pretty({}, indentation)

; <table>...</table>
data class table : HTMLElementWithClosing
    toString():String = toString({})
    pretty(indentation:int=0):String = pretty({}, indentation)

; <thead>...</thead>
data class thead : HTMLElementWithClosing
    toString():String = toString({})
    pretty(indentation:int=0):String = pretty({}, indentation)

; <tbody>...</tbody>
data class tbody : HTMLElementWithClosing
    toString():String = toString({})
    pretty(indentation:int=0):String = pretty({}, indentation)

; <tfoot>...</tfoot>
data class tfoot : HTMLElementWithClosing
    toString():String = toString({})
    pretty(indentation:int=0):String = pretty({}, indentation)

data class title : HTMLElementWithClosing
    toString():String = toString({})
    pretty(indentation:int=0):String = pretty({}, indentation)

; <tr>...</tr>
data class tr : HTMLElementWithClosing
    toString():String = toString({})
    pretty(indentation:int=0):String = pretty({}, indentation)

; <td>...</td>
data class td : HTMLElementWithClosing
    toString():String = toString({})
    pretty(indentation:int=0):String = pretty({}, indentation)
