/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2016 KuiGang Wang
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/*
This is a package that uses DSL to write SQLs.
sql = SQL()
(sql select [user.id, user.name] from user where user.name!:='abc' & user.id>10) toString
*/
package lt::dsl::sql

import lt::util::_

interface SQLBuilder
    buildSQL():String
    arguments():List

interface Selectable

; represents a Column.
; tbl_o is filled with Entity object and name is filled with the column's name
data class Column(tbl_o, name:String):Selectable
    tbl = tbl_o.getClass.simpleName

    gt(o):Condition = Condition(">", this, [o])
    lt(o):Condition = Condition("<", this, [o])
    ge(o):Condition = Condition(">=", this, [o])
    le(o):Condition = Condition("<=", this, [o])
    equal(o):Condition = Condition("=", this, [o])
    notEqual(o):Condition = Condition("<>", this, [o])
    between(a,b):Condition = Condition("between", this, [a,b])
    `in`(agg):Condition = Condition("in", this, [agg])
    like(o):Condition = Condition("like", this, [o])

    assign(o):Assign = Assign(this, o)

    desc():Order = Order(this, false)
    asc():Order = Order(this, true)

    `as`(alias:String):As = As(this, alias)

    toString(context):String = context.surround + tbl + context.surround + "." + context.surround + name + context.surround

data class As(col, alias:String):Selectable
    toString(context):String = col.toString(context) + " as " + alias

; assign to the column
data class Assign(col:Column, o)
    toString(context:SQL):String = col.toString(context) + " = " + context.putValue(o)

; represents a Condition
data class Condition(op:String, col:Column, ls:List)
    toString(context:SQL):String
        sb = StringBuilder()
        sb append col.toString(context) append " " append op append " "
        if ls
            isFirst=true
            for o in ls
                if isFirst
                    isFirst=false
                else
                    sb append ", "
                sb append context.putValue(o)
        return sb.toString
    `and`(b):AndOr = AndOr(true, this, b)
    `or`(b):AndOr = AndOr(false, this, b)

data class AndOr(isAnd:bool, a, b)
    `and`(b):AndOr = AndOr(true, this, b)
    `or`(b):AndOr = AndOr(false, this, b)
    toString(context:SQL):String = (
        if a is type AndOr
            return "(" + a.toString(context) + ")"
        else
            return a.toString(context)
    ) + (
        if isAnd
            return " and "
        else
            return " or "
    ) + (
        if b is type AndOr
            return "(" + b.toString(context) + ")"
        else
            return b.toString(context)
    )

data class Order(col:Column, isAsc:bool)
    toString(context):String = col.toString(context) + " " + (
        if isAsc
            return "asc"
        else
            return "desc"
    )

data class Fun(funcName:String, args:List):Selectable
    `as`(name:String):As = As(this, name)
    toString(context):String
        sb = StringBuilder(funcName)
        sb append "("
        isFirst = true
        for arg in args
            if isFirst
                isFirst=false
            else
                sb append ", "
            try
                sb append arg.toString(context)
            catch ignore
                sb append arg.toString
        sb append ")"
        return sb.toString

data class SQL(surround = ""/* surrounds table and columns */)
    params:List = []        ; the list of arguments

    putValue(o):String
        if o is type EndStatement
            return tableToString(o)
        else
            params + o
            return "?"
    tableToString(o):String
        if o is type EndStatement
            return "(" + o.buildSQL + ")"
        else
            return surround + o.getClass.simpleName + surround

    select_distinct(col:Selectable):Select = select_distinct([col])
    select_distinct(cols:List):Select
        sb:StringBuilder = StringBuilder()
        sb append "select distinct "
        return Select(this, sb, cols)
    select(col:Selectable):Select = select([col])
    select(cols:List):Select
        sb:StringBuilder = StringBuilder()
        sb append "select "
        return Select(this, sb, cols)
    insert_into(tbl_o):Insert
        sb:StringBuilder = StringBuilder()
        sb append "insert into "
        return Insert(this, sb, tbl_o)
    update(tbl_o):Update
        sb:StringBuilder = StringBuilder()
        sb append "update "
        return Update(this, sb, tbl_o)
    delete_from(tbl_o):UpdateWhere
        sb:StringBuilder = StringBuilder()
        sb append "delete from " append tableToString(tbl_o) append " where "
        return UpdateWhere(this, sb)

    count(o):Fun = Fun("count", [o])
    count(os:List):Fun = Fun("count", os)
    sum(o):Fun = Fun("sum", [o])
    avg(o):Fun = Fun("avg", [o])
    first(o):Fun = Fun("first", [o])
    last(o):Fun = Fun("last", [o])
    max(o):Fun = Fun("max", [o])
    min(o):Fun = Fun("min", [o])
    ucase(o):Fun = Fun("ucase", [o])
    lcase(o):Fun = Fun("lcase", [o])
    mid(o, start:int):Fun = Fun("mid", [o, start])
    mid(o, start:int, length:int):Fun = Fun("mid", [o, start, length])
    len(o):Fun = Fun("len", [o])
    round(o, decimals:int):Fun = Fun("round", [o, decimals])
    now():Fun = Fun("now", [])
    format(o, f:String):Fun = Fun("format", [o, f])

    toStringWithContext(cols:List):String
        sb = StringBuilder()
        isFirst=true
        for col in cols
            if isFirst
                isFirst=false
            else
                sb append ", "
            sb append col.toString(this)
        return sb.toString

data class Select(context:SQL, sb:StringBuilder, cols:List)
    sb append context.toStringWithContext(cols)

    into(tbl_o):Select
        sb append " into " append context.tableToString(tbl_o)
        return this

    from(tbl_o):From
        return from([tbl_o])
    from(tbl_os:List):From
        sb append " from "
        return From(context, sb, tbl_os)

data class Union(context:SQL, unionType:String, s1:SQLBuilder, s2:SQLBuilder):SQLBuilder
    buildSQL():String = s1.buildSQL + " " + unionType + " " + s2.buildSQL
    arguments():List = context.params

    union(stmt:SQLBuilder) = Union(context, "union", this, stmt)
    union_all(stmt:SQLBuilder) = Union(context, "union_all", this, stmt)

abstract class EndStatement(context:SQL, sb:StringBuilder):SQLBuilder
    orderBy(order:Order):EndStatement
        return orderBy([order])
    orderBy(orders:List):EndStatement
        sb append " order by "
        sb append context.toStringWithContext(orders)
        return this

    groupBy(col:Column):EndStatement
        return groupBy([col])
    groupBy(cols:List):EndStatement
        sb append " group by " append context.toStringWithContext(cols)
        return this

    limit(length:int):EndStatement
        sb append " limit " append context.putValue(length)
        return this
    limit(start:int, length:int):EndStatement
        sb append " limit " append context.putValue(start) append "," append context.putValue(length)
        return this

    union(stmt:SQLBuilder):Union = Union(context, "union", this, stmt)
    union_all(stmt:SQLBuilder):Union = Union(context, "union all", this, stmt)

    buildSQL():String = sb.toString
    arguments():List = context.params
    toString():String = buildSQL()

class From(context:SQL, sb:StringBuilder, tbls:List):EndStatement(context, sb)
    isFirst=true
    for tbl in tbls
        if isFirst
            isFirst=false
        else
            sb append ", "
        sb append context.tableToString(tbl)

    private doJoin(str:String, tbl_o):Join
        if !str.isEmpty
            sb append " " append str
        sb append " join "
        return Join(context, sb, tbl_o, this)
    join(tbl_o):Join = doJoin("", tbl_o)
    left_join(tbl_o):Join = doJoin("left", tbl_o)
    right_join(tbl_o):Join = doJoin("right", tbl_o)
    inner_join(tbl_o):Join = doJoin("inner", tbl_o)
    outer_join(tbl_o):Join = doJoin("outer", tbl_o)
    full_join(tbl_o):Join = doJoin("full", tbl_o)
    full_outer_join(tbl_o):Join = doJoin("full outer", tbl_o)

    where(con):QueryWhere
        sb append " where "
        return QueryWhere(context, sb, con)

class Join(context:SQL, sb:StringBuilder, tbl_o, from:From)
    sb append context.tableToString(tbl_o)

    on(con:Condition):From
        sb append " on " append con.toString(context)
        return from

class QueryWhere(context:SQL, sb:StringBuilder, con):EndStatement(context, sb)
    sb append con.toString(context)

class Insert(context:SQL, sb:StringBuilder, tbl_o):SQLBuilder
    sb append context.tableToString(tbl_o)

    _(col:Column):Insert = _([col])
    _(cols:List):Insert
        sb append " ("
        isFirst=true
        for col in cols
            if isFirst
                isFirst=false
            else
                sb append ", "
            sb append context.surround append col.name append context.surround
        sb append ")"
        return this
    values(o):Insert = values([o])
    values(values:List):Insert
        sb append " values ("
        isFirst=true
        for value in values
            if isFirst
                isFirst = false
            else
                sb append ", "
            sb append context.putValue(value)
        sb append ")"
        return this
    buildSQL():String = sb.toString
    arguments():List = context.params

class Update(context:SQL, sb:StringBuilder, tbl_o)
    sb append context.tableToString(tbl_o)

    set(assign:Assign):UpdateWhere=set([assign])
    set(assigns:List):UpdateWhere
        sb append " set "
        isFirst=true
        for assign in assigns
            if isFirst
                isFirst=false
            else
                sb append ", "
            sb append assign.toString(context)
        sb append " where "
        return UpdateWhere(context, sb)

class UpdateWhere(context:SQL, sb:StringBuilder):SQLBuilder
    where(con):UpdateWhere
        sb append con.toString(context)
        return this
    buildSQL():String =  sb.toString
    arguments():List = context.params
