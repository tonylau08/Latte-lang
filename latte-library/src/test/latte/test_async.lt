package lt::async::test

import lt::async::Async

class TestAsync
    static
        val async = Async()
        def testWaterfall()
            arr = []
            async.waterfall(
                [
                    (x, next)->
                        arr + 1
                        next(arr)
                    (res, next)->
                        res + 2
                        next(res)
                    (res, next)->
                        res + 3
                        next(res)
                ],
                (err, res)->
                    if err
                        throw err
            )
            return arr
        def testParallel()
            result = []
            async.parallel(
                [
                    (next)->
                        next(1)
                    (next)->
                        next(2)
                    (next)->
                        next(3)
                ], (err, results)->
                    if err
                        throw err
                    else
                        result addAll results
            )
            return result
        def testSeries()
            result = []
            async.series(
                [
                    (next)->
                        next(1)
                    (next)->
                        next(2)
                    (next)->
                        next(3)
                ], (err, results)->
                    result addAll results
            )
            return result
        def testEach()
            result = []
            async.each(
                [1, 2, 3]
                (item, next)->
                    result + item
                    next()
                err->
                    ...
            )
            return result
        def testEachSeries()
            result = []
            async.eachSeries(
                [1, 2, 3]
                (item, next)->
                    result + item
                    next()
                err->
                    ...
            )
            return result
